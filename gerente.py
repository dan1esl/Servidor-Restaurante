# =============================================
# CLIENTE DE RELAT√ìRIOS - SISTEMA DE RESERVAS
# Script para gerar relat√≥rios do sistema de reservas
# =============================================

# =============================================
# IMPORTA√á√ïES
# =============================================

from datetime import datetime
import requests

# =============================================
# CONFIGURA√á√ïES
# =============================================

BASE_URL = 'http://localhost:5000'  # URL base da API

# =============================================
# FUN√á√ïES AUXILIARES
# =============================================

def get_json_safe(url):
    """
    Faz uma requisi√ß√£o GET de forma segura e retorna dados JSON
    
    Args:
        url (str): URL completa para fazer a requisi√ß√£o
        
    Returns:
        list: Lista com os dados JSON ou lista vazia em caso de erro
    """
    try:
        # Fazer requisi√ß√£o HTTP GET
        response = requests.get(url)
        
        # Verificar se a requisi√ß√£o foi bem-sucedida
        if response.status_code == 200:
            try:
                # Tentar converter resposta para JSON
                return response.json()
            except ValueError:
                # Erro ao fazer parse do JSON
                print("‚ùå Erro: Resposta n√£o √© JSON v√°lido.")
                print(f"Resposta recebida: {response.text}")
                return []
        else:
            # Erro HTTP (4xx, 5xx)
            print(f"‚ùå Erro HTTP: Status {response.status_code}")
            print(f"Resposta: {response.text}")
            return []
            
    except requests.RequestException as e:
        # Erro de conex√£o ou timeout
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return []

def formatar_data(data_str):
    """
    Converte data do formato brasileiro (DD-MM-YYYY) para ISO (YYYY-MM-DD)
    
    Args:
        data_str (str): Data no formato DD-MM-YYYY
        
    Returns:
        str: Data no formato ISO (YYYY-MM-DD)
        
    Raises:
        ValueError: Se a data estiver em formato inv√°lido
    """
    try:
        return datetime.strptime(data_str, "%d-%m-%Y").strftime("%Y-%m-%d")
    except ValueError:
        raise ValueError("Data deve estar no formato DD-MM-YYYY")

def exibir_reservas(reservas, titulo):
    """
    Exibe uma lista de reservas de forma formatada
    
    Args:
        reservas (list): Lista de reservas (dicion√°rios)
        titulo (str): T√≠tulo do relat√≥rio
    """
    print(f"\n{'='*60}")
    print(f"üìä {titulo}")
    print(f"{'='*60}")
    
    if not reservas:
        print("üìù Nenhuma reserva encontrada.")
        return
    
    print(f"üìà Total de reservas: {len(reservas)}")
    print("-" * 60)
    
    for i, reserva in enumerate(reservas, 1):
        print(f"üî∏ Reserva #{i}")
        print(f"   ID: {reserva.get('id', 'N/A')}")
        print(f"   üìÖ Data: {reserva.get('data', 'N/A')}")
        print(f"   üïê Hora: {reserva.get('hora', 'N/A')}")
        print(f"   ü™ë Mesa: {reserva.get('mesa', 'N/A')}")
        print(f"   üë• Pessoas: {reserva.get('pessoas', 'N/A')}")
        print(f"   üë§ Respons√°vel: {reserva.get('responsavel', 'N/A')}")
        print(f"   üìã Status: {reserva.get('status', 'N/A')}")
        
        # Exibir gar√ßom apenas se houver
        if reserva.get('garcom'):
            print(f"   üßë‚Äçüíº Gar√ßom: {reserva.get('garcom')}")
        
        print("-" * 40)

# =============================================
# FUN√á√ïES DE RELAT√ìRIO
# =============================================

def relatorio_por_periodo():
    """
    Gera relat√≥rio de reservas por per√≠odo espec√≠fico
    """
    print("\n=== RELAT√ìRIO POR PER√çODO ===")
    
    try:
        # Coletar datas do usu√°rio
        inicio = input("üìÖ Data in√≠cio (DD-MM-YYYY): ")
        fim = input("üìÖ Data fim (DD-MM-YYYY): ")
        
        # Converter datas para formato ISO
        inicio_formatado = formatar_data(inicio)
        fim_formatado = formatar_data(fim)
        
        # Fazer requisi√ß√£o para a API
        url = f'{BASE_URL}/relatorio/periodo?inicio={inicio_formatado}&fim={fim_formatado}'
        reservas = get_json_safe(url)
        
        # Exibir resultados
        titulo = f"RESERVAS DE {inicio} A {fim}"
        exibir_reservas(reservas, titulo)
        
    except ValueError as e:
        print(f"‚ùå Erro nos dados informados: {e}")
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio")

def relatorio_por_mesa():
    """
    Gera relat√≥rio de todas as reservas de uma mesa espec√≠fica
    """
    print("\n=== RELAT√ìRIO POR MESA ===")
    
    try:
        # Coletar n√∫mero da mesa
        mesa = input("ü™ë N√∫mero da mesa: ")
        
        # Validar se √© um n√∫mero
        if not mesa.isdigit():
            print("‚ùå N√∫mero da mesa deve ser um valor num√©rico")
            return
        
        # Fazer requisi√ß√£o para a API
        url = f'{BASE_URL}/relatorio/mesa/{mesa}'
        reservas = get_json_safe(url)
        
        # Exibir resultados
        titulo = f"RESERVAS DA MESA {mesa}"
        exibir_reservas(reservas, titulo)
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio")

def relatorio_por_garcom():
    """
    Gera relat√≥rio de reservas confirmadas por um gar√ßom espec√≠fico
    """
    print("\n=== RELAT√ìRIO POR GAR√áOM ===")
    
    try:
        # Coletar nome do gar√ßom
        nome = input("üßë‚Äçüíº Nome do gar√ßom: ")
        
        # Validar se o nome n√£o est√° vazio
        if not nome.strip():
            print("‚ùå Nome do gar√ßom n√£o pode estar vazio")
            return
        
        # Fazer requisi√ß√£o para a API
        url = f'{BASE_URL}/relatorio/garcom/{nome}'
        reservas = get_json_safe(url)
        
        # Exibir resultados
        titulo = f"RESERVAS CONFIRMADAS POR {nome.upper()}"
        exibir_reservas(reservas, titulo)
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio")

# =============================================
# PROGRAMA PRINCIPAL
# =============================================

def exibir_menu():
    """
    Exibe o menu principal do sistema
    """
    print("=" * 60)
    print("üìä SISTEMA DE RELAT√ìRIOS - RESERVAS")
    print("=" * 60)
    print("1 - Relat√≥rio por per√≠odo")
    print("2 - Relat√≥rio por mesa")
    print("3 - Relat√≥rio por gar√ßom")
    print("0 - Sair")
    print("-" * 60)

def main():
    """
    Fun√ß√£o principal que controla o fluxo do programa
    """
    while True:
        exibir_menu()
        
        try:
            opcao = input("Escolha uma op√ß√£o: ").strip()
            
            if opcao == '1':
                relatorio_por_periodo()
            elif opcao == '2':
                relatorio_por_mesa()
            elif opcao == '3':
                relatorio_por_garcom()
            elif opcao == '0':
                print("üëã Saindo do sistema de relat√≥rios...")
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida! Escolha um n√∫mero de 0 a 3.")
            
            # Pausa para o usu√°rio visualizar o resultado
            if opcao in ['1', '2', '3']:
                input("\n‚è∏Ô∏è  Pressione ENTER para continuar...")
                
        except KeyboardInterrupt:
            print("\n\nüëã Sistema encerrado pelo usu√°rio")
            break
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")
            input("\n‚è∏Ô∏è  Pressione ENTER para continuar...")

# EXECU√á√ÉO DO PROGRAMA

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico: {e}")
        print("üîß Verifique se a API est√° rodando em http://localhost:5000")